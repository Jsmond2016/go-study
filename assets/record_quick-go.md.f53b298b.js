import{_ as n,c as s,o as a,a as t}from"./app.5b6833e4.js";const p='{"title":"go 安装","description":"","frontmatter":{},"headers":[{"level":2,"title":"go 安装","slug":"go-安装"},{"level":2,"title":"hello，world","slug":"hello，world"},{"level":2,"title":"string 类型","slug":"string-类型"},{"level":2,"title":"int 类型","slug":"int-类型"},{"level":2,"title":"bool 类型","slug":"bool-类型"},{"level":2,"title":"条件控制语句","slug":"条件控制语句"},{"level":2,"title":"循环语句","slug":"循环语句"},{"level":2,"title":"函数","slug":"函数"},{"level":2,"title":"方法","slug":"方法"},{"level":2,"title":"数组","slug":"数组"},{"level":2,"title":"切片","slug":"切片"}],"relativePath":"record/quick-go.md","lastUpdated":1658912300116}',o={},c=[t('<h2 id="go-安装" tabindex="-1">go 安装 <a class="header-anchor" href="#go-安装" aria-hidden="true">#</a></h2><ul><li><a href="https://www.liwenzhou.com/posts/Go/00_go_in_vscode/" target="_blank" rel="noopener noreferrer">VS Code配置Go语言开发环境</a></li><li>安装包地址：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener noreferrer">go</a> 下载安装即可</li><li>配置 vs code 环境，参考上面的教程</li><li>安装 go 语言格式化以及相关工具</li><li>配置简单的 snippets</li></ul><h2 id="hello，world" tabindex="-1">hello，world <a class="header-anchor" href="#hello，world" aria-hidden="true">#</a></h2><div class="language-go"><pre><code><span class="token keyword">package</span> main\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="string-类型" tabindex="-1">string 类型 <a class="header-anchor" href="#string-类型" aria-hidden="true">#</a></h2><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n\t<span class="token string">&quot;strings&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>\n\n\ts1 <span class="token operator">:=</span> <span class="token string">&quot;hello, world&quot;</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------------------&quot;</span><span class="token punctuation">)</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.length&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.Split&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.Contains&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;llo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.HasPrefix&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;he&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.HasSuffix&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;ld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.Index&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">&quot;wo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="int-类型" tabindex="-1">int 类型 <a class="header-anchor" href="#int-类型" aria-hidden="true">#</a></h2><blockquote><p>还包括 float, int32, int64 等</p></blockquote><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------number-int-----------------&quot;</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1234</span>\n\t<span class="token keyword">var</span> num2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4567</span>\n\t<span class="token comment">// 没有赋初值，int 默认初值为0</span>\n\t<span class="token keyword">var</span> num3 <span class="token builtin">int</span>\n\t<span class="token keyword">var</span> total <span class="token operator">=</span> num <span class="token operator">+</span> num2\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;num3&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="bool-类型" tabindex="-1">bool 类型 <a class="header-anchor" href="#bool-类型" aria-hidden="true">#</a></h2><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------bool-false-----------------&quot;</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">var</span> trueFlag <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n\t<span class="token keyword">var</span> falseFlag <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>\n\t<span class="token comment">// 没有赋初值，默认为 false</span>\n\t<span class="token keyword">var</span> nonFlag <span class="token builtin">bool</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;trueFlag&quot;</span><span class="token punctuation">,</span> trueFlag<span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;falseFlag&quot;</span><span class="token punctuation">,</span> falseFlag<span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nonFlag&quot;</span><span class="token punctuation">,</span> nonFlag<span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="条件控制语句" tabindex="-1">条件控制语句 <a class="header-anchor" href="#条件控制语句" aria-hidden="true">#</a></h2><ul><li>if ... else</li><li>switch</li><li>select</li></ul><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/2a1146dc42c3" target="_blank" rel="noopener noreferrer">【golang】select关键字用法</a></li></ul><h2 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-hidden="true">#</a></h2><ul><li>for</li><li>for 循环嵌套</li></ul><div class="language-go"><pre><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n            <span class="token keyword">for</span> i2 <span class="token operator">:=</span> <span class="token number">11</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span> i2<span class="token operator">++</span> <span class="token punctuation">{</span>\n                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i2: %d\\n&quot;</span><span class="token punctuation">,</span> i2<span class="token punctuation">)</span>\n                <span class="token keyword">continue</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre></div><ul><li>for ... continue</li></ul><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">/* 定义局部变量 */</span>\n   <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>\n\n   <span class="token comment">/* for 循环 */</span>\n   <span class="token keyword">for</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">15</span> <span class="token punctuation">{</span>\n         <span class="token comment">/* 跳过此次循环 */</span>\n         a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n         <span class="token keyword">continue</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a 的值为 : %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      a<span class="token operator">++</span><span class="token punctuation">;</span>    \n   <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><a href="https://www.runoob.com/go/go-continue-statement.html" target="_blank" rel="noopener noreferrer">资料-菜鸟教程</a></li></ul><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-hidden="true">#</a></h2><p>形式</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">function_name</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>parameter list<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">[</span>return_types<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n   函数体\n<span class="token punctuation">}</span>\n</code></pre></div><p>eg:</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tres <span class="token operator">:=</span> <span class="token function">getMaxNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;res&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">getMaxNum</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t<span class="token comment">/* 声明局部变量 */</span>\n\t<span class="token keyword">var</span> result <span class="token builtin">int</span>\n\n\t<span class="token keyword">if</span> num1 <span class="token operator">&gt;</span> num2 <span class="token punctuation">{</span>\n\t\tresult <span class="token operator">=</span> num1\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tresult <span class="token operator">=</span> num2\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-hidden="true">#</a></h2><blockquote><p>Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集</p></blockquote><p>形式：</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token punctuation">(</span>variable_name variable_data_type<span class="token punctuation">)</span> <span class="token function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span><span class="token punctuation">{</span>\n   <span class="token comment">/* 函数体*/</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>eg:</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">/* 定义结构体 */</span>\n<span class="token keyword">type</span> Circle <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tradius <span class="token builtin">float64</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> c1 Circle\n\tc1<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">10.00</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;圆的面积 = &quot;</span><span class="token punctuation">,</span> c1<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//该 method 属于 Circle 类型对象中的方法</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c Circle<span class="token punctuation">)</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//c.radius 即为 Circle 类型对象中的属性</span>\n\t<span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> c<span class="token punctuation">.</span>radius <span class="token operator">*</span> c<span class="token punctuation">.</span>radius\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h2><ul><li>数组的定义：</li></ul><div class="language-go"><pre><code><span class="token keyword">var</span> 数组变量名 <span class="token punctuation">[</span>元素数量<span class="token punctuation">]</span>T\n\n\n<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>\n<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span>\na <span class="token operator">=</span> b <span class="token comment">//不可以这样做，因为此时a和b是不同的类型</span>\n</code></pre></div><ul><li>数组初始化-方式1：使用初始化列表来设置数组元素的值</li></ul><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> testArray <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>                        <span class="token comment">//数组会初始化为int类型的零值</span>\n\t<span class="token keyword">var</span> numArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>                 <span class="token comment">//使用指定的初始值完成初始化</span>\n\t<span class="token keyword">var</span> cityArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span> <span class="token comment">//使用指定的初始值完成初始化</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>testArray<span class="token punctuation">)</span> <span class="token comment">//[0 0 0]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>numArray<span class="token punctuation">)</span>  <span class="token comment">//[1 2 0]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cityArray<span class="token punctuation">)</span> <span class="token comment">//[北京 上海 深圳]</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------------&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><ul><li>数组初始化-方式2：让编译器根据初始值的个数自行推断数组的长度</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> testArray <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>\n\t<span class="token keyword">var</span> numArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>\n\t<span class="token keyword">var</span> cityArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>testArray<span class="token punctuation">)</span>                          <span class="token comment">//[0 0 0]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>numArray<span class="token punctuation">)</span>                           <span class="token comment">//[1 2]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;type of numArray:%T\\n&quot;</span><span class="token punctuation">,</span> numArray<span class="token punctuation">)</span>   <span class="token comment">//type of numArray:[2]int</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cityArray<span class="token punctuation">)</span>                          <span class="token comment">//[北京 上海 深圳]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;type of cityArray:%T\\n&quot;</span><span class="token punctuation">,</span> cityArray<span class="token punctuation">)</span> <span class="token comment">//type of cityArray:[3]string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>数组初始化-方式3：使用指定索引值的方式来初始化数组</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>                  <span class="token comment">// [0 1 0 5]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;type of a:%T\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">//type of a:[4]int</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>数组的遍历</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span>\n\t<span class="token comment">// 方法1：for循环遍历</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 方法2：for range遍历</span>\n\t<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world=======&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;略略略&quot;</span><span class="token punctuation">}</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> test <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>多维数组，定义</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n\t\t<span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span><span class="token string">&quot;广州&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span><span class="token string">&quot;成都&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;重庆&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[[北京 上海] [广州 深圳] [成都 重庆]]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//支持索引取值:重庆</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>二维数组的遍历</li></ul><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n\t\t<span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span><span class="token string">&quot;广州&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span><span class="token string">&quot;成都&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;重庆&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v1 <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v2 <span class="token operator">:=</span> <span class="token keyword">range</span> v1 <span class="token punctuation">{</span>\n\t\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\t&quot;</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>注意：</strong> 多维数组<strong>只有第一层</strong>可以使用<code>...</code>来让编译器推导数组长度。例如：</p><div class="language-go"><pre><code><span class="token comment">//支持的写法</span>\na <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;广州&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;成都&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;重庆&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//不支持多维数组的内层使用...</span>\nb <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;广州&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;深圳&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;成都&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;重庆&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>数组是值类型</li></ul><p>数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值。</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">modifyArray</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">modifyArray2</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>\n\t<span class="token function">modifyArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//在modify中修改的是a的副本x</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[10 20 30]</span>\n\tb <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>\n\t\t<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">modifyArray2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//在modify中修改的是b的副本x</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">//[[1 1] [1 1] [1 1]]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="切片" tabindex="-1">切片 <a class="header-anchor" href="#切片" aria-hidden="true">#</a></h2><p>切片： slice</p><p>数组的缺点：固定长度，不灵活，因此有很大的局限性</p><p>切片的特点：</p><ul><li>是一个拥有相同类型元素的<strong>可变长度</strong>的序列</li><li>是一个引用类型，它的内部结构包含<code>地址</code>、<code>长度</code>和<code>容量</code>。</li></ul><p>切片的定义：</p><div class="language-go"><pre><code><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token punctuation">]</span>T\n</code></pre></div><p>eg:</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 声明切片类型</span>\n\t<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>              <span class="token comment">//声明一个字符串切片</span>\n\t<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment">//声明一个整型切片并初始化</span>\n\t<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token comment">//声明一个布尔切片并初始化</span>\n\t<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token comment">//声明一个布尔切片并初始化</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>              <span class="token comment">//[]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>              <span class="token comment">//[]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>              <span class="token comment">//[false true]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>       <span class="token comment">//true</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>       <span class="token comment">//false</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>       <span class="token comment">//false</span>\n\t<span class="token comment">// fmt.Println(c == d)         //切片是引用类型，不支持直接比较，只能和nil比较</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>**注意：**切片是引用类型，不支持直接比较，只能和nil比较</p><ul><li>切片的长度和容量： <ul><li>长度：<code>len(s)</code></li><li>容量：<code>cap(s)</code></li></ul></li></ul><p><strong>待完成：</strong></p><ul><li>map</li><li>指针</li><li>自定义类型和类型别名</li><li>结构体定义和结构体</li><li>方法和接收者</li><li>结构体嵌套</li><li>结构体可见性和 json</li><li>实战：员信息管理系统</li><li>包-package</li><li>接口定义，接口变量</li><li>反射</li><li>结构体反射</li><li>go语言并发之goroutine</li><li>go语言并发之channel</li></ul>',65)];var e=n(o,[["render",function(n,t,p,o,e,u){return a(),s("div",null,c)}]]);export{p as __pageData,e as default};
